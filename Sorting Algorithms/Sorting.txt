.types of sorting------------------------------------------------------------------------


There are various types of sorting algorithms, each with its own characteristics and efficiency. Here are some commonly 
used types of sorting algorithms:

1. **Bubble Sort**: Bubble sort repeatedly compares adjacent elements and swaps them if they are in the wrong order. 
It continues iterating through the list until the entire list is sorted. Bubble sort has a time complexity of O(n^2) 
and is simple to implement but relatively inefficient for large lists.

2. **Selection Sort**: Selection sort repeatedly selects the minimum (or maximum) element from the unsorted part of 
the list and places it at the beginning. It divides the list into a sorted and an unsorted region until the entire 
list is sorted. Selection sort also has a time complexity of O(n^2), but it performs better than bubble sort in most scenarios.

3. **Insertion Sort**: Insertion sort builds the final sorted list by repeatedly inserting elements from the unsorted 
part into their correct position in the sorted part. It iterates through the list, comparing elements and shifting 
them to the right until they are in the correct order. Insertion sort has a time complexity of O(n^2) but performs 
well for small lists or partially sorted lists.

4. **Merge Sort**: Merge sort is a divide-and-conquer algorithm that divides the list into smaller sublists, recursively
 sorts them, and then merges them to obtain a sorted list. It uses a merging technique to combine the sublists in a 
 sorted manner. Merge sort has a time complexity of O(n log n) and is known for its stability and efficient performance for large lists.

5. **Quick Sort**: Quick sort is also a divide-and-conquer algorithm that selects a pivot element and partitions the 
list into two sublists, one with elements smaller than the pivot and another with elements greater than the pivot. 
It then recursively sorts the sublists. Quick sort has an average time complexity of O(n log n) but can degrade to 
O(n^2) in the worst case. It is widely used due to its efficiency and low space requirements.

6. **Heap Sort**: Heap sort uses a binary heap data structure to sort elements. It builds a max-heap (or min-heap)
 from the input list, repeatedly extracts the maximum (or minimum) element from the heap and places it in the sorted
  region. Heap sort has a time complexity of O(n log n) and performs well for large lists but requires additional space for the heap.

7. **Radix Sort**: Radix sort is a non-comparative sorting algorithm that sorts elements based on their digits
 or characters. It processes the elements from the least significant digit to the most significant digit, placing
  them in appropriate buckets. Radix sort has a time complexity of O(k * n), where k is the number of digits or characters in the input.

8. **Counting Sort**: Counting sort is an integer-based sorting algorithm that counts the frequency of elements 
and uses the counts to determine their positions in the final sorted list. It requires knowledge of the range of 
input values and has a time complexity of O(n + k), where n is the number of elements and k is the range of input values.

These are just a few examples of sorting algorithms, each with its own advantages, disadvantages, and 
best-case scenarios. The choice of sorting algorithm depends on factors such as the size of the list, 
the distribution of data, stability requirements, and the efficiency desired for the specific use case.


